[tool:pytest]
# Extended pytest configuration for comprehensive testing
minversion = 6.0

# Test discovery and execution options
addopts = 
    -ra 
    --strict-markers 
    --strict-config
    --ignore=docs/
    --ignore=build/
    --ignore=dist/
    --tb=short
    --color=yes
    --disable-warnings
    
testpaths = tests

# File and function patterns
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_*

# Custom markers for test categorization
markers =
    unit: marks tests as unit tests (fast, isolated)
    integration: marks tests as integration tests (moderate speed)
    e2e: marks tests as end-to-end tests (slow, full pipeline)
    performance: marks tests as performance benchmarks (slow)
    slow: marks tests as slow (deselect with '-m "not slow"')
    hardware: marks tests requiring hardware tools (SPICE, Verilog)
    spice: marks tests requiring SPICE simulator
    verilog: marks tests requiring Verilog tools  
    regression: marks tests as regression tests
    security: marks tests as security/vulnerability tests
    memory: marks tests that check memory usage
    gpu: marks tests requiring GPU acceleration
    parallel: marks tests that can run in parallel
    serial: marks tests that must run serially
    windows: marks tests specific to Windows platform
    linux: marks tests specific to Linux platform
    macos: marks tests specific to macOS platform

# Warning filters
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:matplotlib.*
    ignore::RuntimeWarning:numpy.*
    error::UserWarning:analog_pde_solver.*
    
# Logging configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage options (when using --cov)
[coverage:run]
source = analog_pde_solver
omit = 
    */tests/*
    */test_*
    setup.py
    analog_pde_solver/_version.py
    analog_pde_solver/examples/*
parallel = true
concurrency = multiprocessing

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstract
precision = 2
show_missing = true
skip_covered = false

[coverage:html]
directory = htmlcov
title = Analog PDE Solver Coverage Report

[coverage:xml]
output = coverage.xml