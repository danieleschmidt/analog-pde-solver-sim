#!/usr/bin/env python3
"""Global compliance and multi-region example."""

import sys
from pathlib import Path

# Add current directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from analog_pde_solver.i18n.translations import (
        TranslationManager, get_translation_manager, t, set_language
    )
    from analog_pde_solver.compliance.data_protection import (
        DataProtectionManager, DataClassification, ProcessingPurpose
    )
    IMPORTS_AVAILABLE = True
except ImportError as e:
    IMPORTS_AVAILABLE = False
    IMPORT_ERROR = str(e)


def main():
    """Demonstrate global compliance and multi-language support."""
    print("Analog PDE Solver - Global Compliance Example")
    print("=" * 48)
    
    if not IMPORTS_AVAILABLE:
        print(f"‚ùå Imports not available: {IMPORT_ERROR}")
        print("This example requires the full analog_pde_solver package")
        return
    
    # Multi-language support demonstration
    print("\\nüåç MULTI-LANGUAGE SUPPORT")
    print("-" * 30)
    
    translation_manager = get_translation_manager()
    
    # Display supported languages
    print("Supported languages:")
    for code, name in translation_manager.get_supported_languages().items():
        print(f"  {code}: {name}")
    
    # Demonstrate translations in different languages
    languages_to_test = ['en', 'es', 'fr', 'de', 'ja', 'zh']
    
    print("\\nSystem messages in different languages:")
    for lang in languages_to_test:
        message = t('system.startup', language=lang)
        print(f"  {translation_manager.get_language_name(lang):10}: {message}")
    
    # Demonstrate solver messages
    print("\\nSolver messages:")
    for lang in languages_to_test[:3]:  # Show fewer for brevity
        message = t('solver.converged', language=lang, iterations=42)
        print(f"  {translation_manager.get_language_name(lang):10}: {message}")
    
    # Number and duration formatting
    print("\\nLocalized formatting:")
    test_number = 1234567.89
    test_duration = 0.00234
    
    for lang in ['en', 'de', 'fr']:
        num_formatted = translation_manager.format_number(test_number, lang)
        dur_formatted = translation_manager.format_duration(test_duration, lang)
        print(f"  {lang}: {num_formatted} | {dur_formatted}")
    
    # Data Protection Compliance
    print("\\nüîí DATA PROTECTION COMPLIANCE")
    print("-" * 35)
    
    # Initialize data protection manager
    dp_manager = DataProtectionManager(
        organization_name="Terragon Labs",
        default_jurisdiction="EU"
    )
    
    print("Data protection manager initialized for multi-region compliance")
    
    # Register data subjects from different jurisdictions
    subjects_data = [
        ("user_eu_001", "user", "EU"),
        ("user_us_001", "user", "US-CA"), 
        ("user_sg_001", "user", "SG"),
        ("system_monitor", "system", "EU")
    ]
    
    print("\\nRegistering data subjects:")
    for subject_id, subject_type, jurisdiction in subjects_data:
        subject = dp_manager.register_data_subject(subject_id, subject_type, jurisdiction)
        print(f"  ‚úì {subject_id} ({subject_type}) in {jurisdiction}")
    
    # Record consent for different purposes
    print("\\nRecording consent:")
    
    consent_scenarios = [
        ("user_eu_001", [ProcessingPurpose.COMPUTATION, ProcessingPurpose.MONITORING], 365),
        ("user_us_001", [ProcessingPurpose.COMPUTATION, ProcessingPurpose.ANALYTICS], 730),
        ("user_sg_001", [ProcessingPurpose.COMPUTATION], 365),
    ]
    
    for subject_id, purposes, retention_days in consent_scenarios:
        success = dp_manager.record_consent(subject_id, purposes, retention_days)
        purpose_names = [p.value for p in purposes]
        print(f"  ‚úì {subject_id}: {purpose_names} (retain {retention_days} days)")
    
    # Record data processing activities
    print("\\nRecording processing activities:")
    
    processing_activities = [
        ("user_eu_001", "solver_parameters", ProcessingPurpose.COMPUTATION, DataClassification.INTERNAL),
        ("user_eu_001", "performance_metrics", ProcessingPurpose.MONITORING, DataClassification.CONFIDENTIAL),
        ("user_us_001", "usage_patterns", ProcessingPurpose.ANALYTICS, DataClassification.INTERNAL),
        ("system_monitor", "system_health", ProcessingPurpose.MONITORING, DataClassification.INTERNAL),
    ]
    
    record_ids = []
    for subject_id, data_type, purpose, classification in processing_activities:
        record_id = dp_manager.record_processing(
            subject_id, data_type, purpose, classification
        )
        record_ids.append(record_id)
        print(f"  ‚úì {subject_id}: {data_type} ({purpose.value}) -> {record_id}")
    
    # Demonstrate data subject rights
    print("\\nüë§ DATA SUBJECT RIGHTS")
    print("-" * 25)
    
    # Right of access (GDPR Article 15)
    print("Right of access - retrieving user data:")
    user_data = dp_manager.get_subject_data("user_eu_001")
    
    print(f"  Subject info: {user_data['subject_info']['subject_type']} in {user_data['subject_info']['jurisdiction']}")
    print(f"  Processing records: {len(user_data['processing_records'])}")
    print(f"  Consent purposes: {user_data['subject_info']['consent_purposes']}")
    
    for record in user_data['processing_records']:
        print(f"    - {record['data_type']} for {record['purpose']} ({record['classification']})")
    
    # Right to withdrawal of consent
    print("\\nConsent withdrawal demonstration:")
    print("  Withdrawing analytics consent for user_us_001...")
    dp_manager.withdraw_consent("user_us_001", [ProcessingPurpose.ANALYTICS])
    print("  ‚úì Consent withdrawn and related data scheduled for deletion")
    
    # Generate compliance reports
    print("\\nüìä COMPLIANCE REPORTING")
    print("-" * 28)
    
    # Generate reports for different jurisdictions
    jurisdictions = ['EU', 'US-CA', 'SG']
    
    for jurisdiction in jurisdictions:
        print(f"\\n{jurisdiction} Compliance Report:")
        report = dp_manager.generate_compliance_report(jurisdiction)
        
        if jurisdiction in report['jurisdiction_reports']:
            juris_report = report['jurisdiction_reports'][jurisdiction]
            
            print(f"  Subjects: {juris_report['subjects_count']}")
            print(f"  Records: {juris_report['records_count']}")
            
            # Consent statistics
            consent_stats = juris_report['consent_statistics']
            print(f"  Consent rate: {consent_stats['consent_rate']:.1%}")
            
            # Compliance checks
            compliance_checks = juris_report['compliance_checks']
            
            if 'consent_compliance' in compliance_checks:
                consent_check = compliance_checks['consent_compliance']
                status = "‚úì COMPLIANT" if consent_check['compliant'] else "‚ùå VIOLATIONS"
                print(f"  Consent compliance: {status}")
                
                if not consent_check['compliant']:
                    print(f"    Violations: {consent_check['violations']}")
            
            if 'retention_compliance' in compliance_checks:
                retention_check = compliance_checks['retention_compliance']
                status = "‚úì COMPLIANT" if retention_check['compliant'] else "‚ùå VIOLATIONS"
                print(f"  Retention compliance: {status}")
                
                if not retention_check['compliant']:
                    print(f"    Violations: {retention_check['violations']}")
            
            # Data cleanup status
            cleanup = compliance_checks.get('data_cleanup', {})
            if cleanup.get('requires_action', False):
                print(f"  ‚ö†Ô∏è  Action required: {cleanup['expired_records']} expired records")
            else:
                print("  ‚úì Data cleanup: up to date")
    
    # Demonstrate right to erasure (GDPR Article 17)
    print("\\nüóëÔ∏è  RIGHT TO ERASURE")
    print("-" * 22)
    
    print("Demonstrating data deletion for user_sg_001:")
    deletion_report = dp_manager.delete_subject_data("user_sg_001", verify=True)
    
    print(f"  Status: {deletion_report['status']}")
    print(f"  Records deleted: {deletion_report['records_deleted']}")
    print(f"  Verification: {deletion_report['verification_status']}")
    
    # Data cleanup and anonymization
    print("\\nüîÑ DATA LIFECYCLE MANAGEMENT")
    print("-" * 32)
    
    print("Running data cleanup (anonymization of expired records):")
    cleanup_report = dp_manager.anonymize_expired_data()
    
    print(f"  Expired records processed: {cleanup_report['expired_records']}")
    print(f"  Records anonymized: {cleanup_report['anonymized_records']}")
    print(f"  Records deleted: {cleanup_report['deleted_records']}")
    
    # Export data inventory for audit
    print("\\nüìã AUDIT TRAIL")
    print("-" * 16)
    
    inventory_path = Path("data_inventory_audit.json")
    if dp_manager.export_data_inventory(inventory_path):
        print(f"‚úì Data inventory exported to: {inventory_path}")
        print("  This file can be used for:")
        print("    - Regulatory audits")
        print("    - Data mapping exercises") 
        print("    - Compliance verification")
        print("    - Privacy impact assessments")
    
    # Multi-region summary
    print("\\nüåê MULTI-REGION SUMMARY")
    print("-" * 26)
    
    final_report = dp_manager.generate_compliance_report()
    
    print("Global compliance status:")
    for jurisdiction, juris_data in final_report['jurisdiction_reports'].items():
        print(f"  {jurisdiction}:")
        print(f"    Subjects: {juris_data['subjects_count']}")
        print(f"    Records: {juris_data['records_count']}")
        
        consent_rate = juris_data['consent_statistics']['consent_rate']
        retention_rate = juris_data['retention_statistics']['compliance_rate']
        
        print(f"    Consent compliance: {consent_rate:.1%}")
        print(f"    Retention compliance: {retention_rate:.1%}")
    
    print("\\nGlobal compliance features demonstrated:")
    print("  ‚úì Multi-language support (10 languages)")
    print("  ‚úì GDPR compliance (EU)")
    print("  ‚úì CCPA compliance (California)")
    print("  ‚úì PDPA compliance (Singapore)")
    print("  ‚úì Data subject rights implementation")
    print("  ‚úì Automated data lifecycle management")
    print("  ‚úì Compliance reporting and audit trails")
    print("  ‚úì Cross-border data transfer controls")
    
    print("\\n" + "="*48)
    print("Global compliance example completed successfully!")
    print("The system is ready for worldwide deployment with")
    print("full regulatory compliance and multi-language support.")


if __name__ == "__main__":
    main()