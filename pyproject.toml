[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "analog-pde-solver-sim"
dynamic = ["version"]
description = "Python + Verilog playground for analog accelerators solving PDEs"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Analog PDE Team", email = "analog-pde@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "torch>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "flake8-docstrings>=1.6.0",
    "flake8-type-checking>=2.0.0",
    "mypy>=0.910",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pip-audit>=2.6.0",
    "pre-commit>=2.20.0",
    "build>=0.8.0",
    "twine>=4.0.0",
]
docs = [
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.17.0",
]
hardware = [
    "PySpice>=1.5.0",
    "pyverilog>=1.3.0",
    "cocotb>=1.6.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/analog-pde-solver-sim"
Documentation = "https://analog-pde-solver.readthedocs.io"
Repository = "https://github.com/yourusername/analog-pde-solver-sim.git"
"Bug Tracker" = "https://github.com/yourusername/analog-pde-solver-sim/issues"

[tool.setuptools_scm]
write_to = "analog_pde_solver/_version.py"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
severity = "medium"
confidence = "medium"

[tool.coverage.run]
source = ["analog_pde_solver"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "analog_pde_solver/_version.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["analog_pde_solver"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D103,D100",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".tox",
    ".eggs",
    "*.egg-info"
]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]