# Autonomous Value Discovery Rules
# Defines patterns and scoring for automatic work item detection

patterns:
  
  technical_debt:
    code_smells:
      - pattern: "TODO:|FIXME:|HACK:|XXX:"
        weight: 0.7
        context_lines: 3
        
      - pattern: "temporary|quick.?fix|workaround"
        weight: 0.6
        case_sensitive: false
        
      - pattern: "def .{50,}"  # Long function names
        weight: 0.4
        file_types: [".py"]
        
    complexity_indicators:
      - pattern: "if.*if.*if.*if"  # Nested conditions
        weight: 0.8
        file_types: [".py", ".js", ".ts"]
        
      - pattern: "for.*for.*for"   # Nested loops
        weight: 0.9
        file_types: [".py", ".js", ".ts"]
        
    duplication_patterns:
      - min_lines: 10
        similarity_threshold: 0.85
        weight: 0.6

  security_issues:
    vulnerability_patterns:
      - pattern: "eval\\(|exec\\("
        weight: 1.0
        severity: "high"
        
      - pattern: "subprocess\\.call|os\\.system"
        weight: 0.8
        severity: "medium"
        
      - pattern: "pickle\\.loads|yaml\\.load"
        weight: 0.7
        severity: "medium"
        
    dependency_issues:
      - outdated_packages:
          age_threshold_days: 90
          weight: 0.5
          
      - vulnerable_packages:
          weight: 1.0
          severity_threshold: "medium"

  performance_issues:
    bottleneck_patterns:
      - pattern: "time\\.sleep|threading\\.Lock"
        weight: 0.6
        context: "performance_critical"
        
      - pattern: "\\*\\*kwargs.*\\*\\*kwargs"  # Excessive kwargs
        weight: 0.4
        
    memory_patterns:
      - pattern: "\\[.*for.*in.*\\].*\\[.*for.*in.*\\]"  # List comprehension chains
        weight: 0.5

  documentation_gaps:
    missing_docs:
      - pattern: "def \\w+\\(.*\\):\\s*$"  # Functions without docstrings
        weight: 0.3
        file_types: [".py"]
        
      - pattern: "class \\w+.*:\\s*$"     # Classes without docstrings  
        weight: 0.4
        file_types: [".py"]

scoring_rules:
  
  base_scores:
    technical_debt: 50
    security: 80
    performance: 60
    documentation: 20
    feature: 70
    
  multipliers:
    file_change_frequency:
      high: 1.5    # Files changed >10 times in last month
      medium: 1.2  # Files changed 5-10 times
      low: 1.0     # Files changed <5 times
      
    code_coverage:
      low: 1.4     # <50% coverage
      medium: 1.1  # 50-80% coverage
      high: 1.0    # >80% coverage
      
    component_criticality:
      core: 1.3        # Core business logic
      interface: 1.2   # Public APIs
      utility: 1.0     # Helper functions
      test: 0.8        # Test code

  penalties:
    recent_changes: -0.2  # Recently modified files (avoid churn)
    external_dependency: -0.1  # Issues in external libraries
    
discovery_schedule:
  continuous:
    - pattern_matching: "on_file_change"
    - security_scanning: "hourly"
    - dependency_check: "daily"
    
  periodic:
    - full_analysis: "weekly"
    - architecture_review: "monthly"
    - scoring_calibration: "quarterly"